<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++里的类型转换</title>
      <link href="/2022/06/25/C-%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/"/>
      <url>/2022/06/25/C-%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C++类型转换"></a>C++类型转换</h1><hr><p>由于C++继承了C，因此C语言中的强制类型转换方法在C++中同样适用。<br>形式为：<br><b>(类型说明符)表达式</b><br>不过在C++里，除了这种转换类型的方法外，还有四种转换方法。</p><ul><li>static_cast&lt;类型说明符&gt;(表达式）</li><li>dynamic_cast&lt;类型说明符&gt;(表达式）</li><li>const_cast&lt;类型说明符&gt;(表达式）</li><li>reinterpret_cast&lt;类型说明符&gt;(表达式）</li></ul><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>reinterpret_cast 运算符并不会改变括号中运算对象的值，而是对该对象从位模式上进行重新解释<br>为了理解这个“从位模式上进行重新解释”，就得先明白Int类型的指针与Char类型的指针与其他自定义类型的指针的区别在哪，这些指针有啥差异。<br><b>“指向不同类型之各指针间的差异，既不在其指针表示法不同，也不在其内容（代表一个地址）不同，而是在其所寻址出来的对象类型不同。也就是说，指针类型会教导编译器如何解释某个特定地址中的内存内容及其大小”</b><br>以下面的代码为例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0x00636261</span>;<span class="comment">//用16进制表示32位int，0x61是字符&#x27;a&#x27;的ASCII码</span></span><br><span class="line"><span class="keyword">int</span> * pnum = &amp;num;</span><br><span class="line"><span class="keyword">char</span> * pstr = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(pnum);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pnum指针的值: &quot;</span>&lt;&lt;pnum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pstr指针的值: &quot;</span>&lt;&lt;<span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(pstr)&lt;&lt;endl;<span class="comment">//直接输出pstr会输出其指向的字符串，这里的类型转换是为了保证输出pstr的值</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pnum指向的内容: &quot;</span>&lt;&lt;hex&lt;&lt;*pnum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pstr指向的内容: &quot;</span>&lt;&lt;pstr&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pnum和pstr的值是一样的，但是过程不同。<br>即，使用reinterpret_cast运算符把pnum从int*转变成char*类型并用于初始化pstr后，pstr也指向num的内存区域，但是由于pstr是char*类型的，通过pstr读写num内存区域将不再按照整型变量的规则，而是按照char型变量规则。<br>如果我们将num变为0x63006261，那pnum的值就是”ab”了。</p><p>所以在使用这类转型的时候需要非常慎重。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++里的类型转换</title>
      <link href="/2022/06/25/C++%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/06/25/C++%E9%87%8C%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C++类型转换"></a>C++类型转换</h1><hr><p>由于C++继承了C，因此C语言中的强制类型转换方法在C++中同样适用。<br>形式为：<br><b>(类型说明符)表达式</b><br>不过在C++里，除了这种转换类型的方法外，还有四种转换方法。</p><ul><li>static_cast&lt;类型说明符&gt;(表达式）</li><li>dynamic_cast&lt;类型说明符&gt;(表达式）</li><li>const_cast&lt;类型说明符&gt;(表达式）</li><li>reinterpret_cast&lt;类型说明符&gt;(表达式）</li></ul><h3 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h3><p>reinterpret_cast 运算符并不会改变括号中运算对象的值，而是对该对象从位模式上进行重新解释<br>为了理解这个“从位模式上进行重新解释”，就得先明白Int类型的指针与Char类型的指针与其他自定义类型的指针的区别在哪，这些指针有啥差异。<br><b>“指向不同类型之各指针间的差异，既不在其指针表示法不同，也不在其内容（代表一个地址）不同，而是在其所寻址出来的对象类型不同。也就是说，指针类型会教导编译器如何解释某个特定地址中的内存内容及其大小”</b><br>以下面的代码为例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0x00636261</span>;<span class="comment">//用16进制表示32位int，0x61是字符&#x27;a&#x27;的ASCII码</span></span><br><span class="line"><span class="keyword">int</span> * pnum = &amp;num;</span><br><span class="line"><span class="keyword">char</span> * pstr = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span> *&gt;(pnum);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pnum指针的值: &quot;</span>&lt;&lt;pnum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pstr指针的值: &quot;</span>&lt;&lt;<span class="keyword">static_cast</span>&lt;<span class="keyword">void</span> *&gt;(pstr)&lt;&lt;endl;<span class="comment">//直接输出pstr会输出其指向的字符串，这里的类型转换是为了保证输出pstr的值</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pnum指向的内容: &quot;</span>&lt;&lt;hex&lt;&lt;*pnum&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;pstr指向的内容: &quot;</span>&lt;&lt;pstr&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pnum和pstr的值是一样的，但是过程不同。<br>即，使用reinterpret_cast运算符把pnum从int*转变成char*类型并用于初始化pstr后，pstr也指向num的内存区域，但是由于pstr是char*类型的，通过pstr读写num内存区域将不再按照整型变量的规则，而是按照char型变量规则。<br>如果我们将num变为0x63006261，那pnum的值就是”ab”了。</p><p>所以在使用这类转型的时候需要非常慎重。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/25/hello-world/"/>
      <url>/2022/06/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>驱动开发学习笔记（2）</title>
      <link href="/2022/01/24/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
      <url>/2022/01/24/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-驱动开发学习笔记（2）"><a href="#Windows-驱动开发学习笔记（2）" class="headerlink" title="Windows 驱动开发学习笔记（2）"></a>Windows 驱动开发学习笔记（2）</h1><hr><p>本文需要读者拥有以下知识。</p>1. C或者C++语法基础（重要）2. 计算机组成原理与操作系统（略微）3. 熟练使用谷歌百度等搜索引擎（必要）<p>本系列文章内程序的编写和测试环境均为 visual studio 2013 和 win10。<br>开发环境搭建可以参考<a href="https://blog.csdn.net/newnewman80/article/details/90754999">windows10 驱动开发环境 VS2019+WDK10</a></p><hr><p>在上一章中，我们编写了一个最基础的windows驱动，在内核层面输出了HelloWorld。<br>在上次编写驱动程序中，还留下了一个很严重的问题。<br>它没有办法正常卸载！（还是可以暴力卸载的）<br>这个问题是因为我们并没有编写它的卸载例程。<br>下面是上次编写的驱动代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line">NTSTATUS DriverEntry（PDRIVER_OBJECT driver,UNICODE_STRING reg_path）</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要在DriverEntry函数中添加如下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver-&gt;DriverUnload = DrvUnload;</span><br></pre></td></tr></table></figure><p>这里就涉及到了驱动对象的数据结构了。<br>我就不给出完整字段了，只对其中重要的字段提一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">PDEVICE_OBJECT   DeviceObject;</span><br><span class="line">...</span><br><span class="line">UNICODE_STRING   DriverName;</span><br><span class="line">PUNICODE_STRING  HardwareDatabase;</span><br><span class="line">...</span><br><span class="line">PDRIVER_STARTIO  DriverStartIo;</span><br><span class="line">PDRIVER_UNLOAD   DriverUnload;</span><br><span class="line">PDRIVER_DISPATCH MajorFunction[IRP_MJ_MAXIMUM_FUNCTION + <span class="number">1</span>];</span><br><span class="line">&#125;DRIVER_OBJECT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DRIVER_OBJECT</span> *<span class="title">PDRIVER_OBJECT</span>;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>DeviceObject:</strong><br>每个驱动都会有一个或者多个设备对象。每个设备对象都会有一个指针指向下一个设备对象。此处的DeviceObject指向驱动对象的第一个设备对象</p></blockquote><blockquote><p><strong>DriverName:</strong><br>DriverName记录的是驱动的名字，该字符串一般是\Driver[驱动程序名称]</p></blockquote><blockquote><p><strong>HardwareDatabase:</strong><br>这里记录的是设备的硬件数据库键名</p></blockquote><blockquote><p><strong>DriverStartIo:</strong><br>记录StartIo例程的函数地址</p></blockquote><blockquote><p><strong>DriverUnload:</strong><br>指定驱动卸载时所用的回调函数地址</p></blockquote><blockquote><p><strong>MajorFunction:</strong><br>记录的是一个函数指针数组。这个MajorFunction数组中每个成员都记录着一个指针，这每一个指针指向的都是一个个函数，这个函数是处理IRP的派遣函数</p></blockquote><p>所以说，我们得自己编写驱动卸载的回调函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">VOID<span class="title">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Unload\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此完整的代码应该是这样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">VOID<span class="title">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Unload\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS<span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver,UNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">driver-&gt;DriverUnload = DrvUnload;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下<br><a href="https://imgtu.com/i/7ssZFA"><img src="https://s4.ax1x.com/2022/01/19/7ssZFA.png" alt="7ssZFA.png"></a></p><h3 id="设备的添加和卸载"><a href="#设备的添加和卸载" class="headerlink" title="设备的添加和卸载"></a>设备的添加和卸载</h3><p>在NT驱动中，设备的创建是由IoCreateDevice内核函数完成的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME<span class="meta-string">L&quot;\\DEVICE\\MyFirstDevice&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">VOID<span class="title">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">IoDeleteDevice</span>(pdriver-&gt;DeviceObject);</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Unload\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS<span class="title">DriverEntry</span><span class="params">(PDRIVER_OBJECT driver,UNICODE_STRING reg_path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">driver-&gt;DriverUnload = DrvUnload;</span><br><span class="line"></span><br><span class="line">NTSTATUS status = STATUS_SUCCESS;</span><br><span class="line"></span><br><span class="line">UNICODE_STRING devicename = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">PDRIVER_OBJECT pdevice = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">driver-&gt;DriverUnload = DrvUnload;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RtlInitUnicodeString</span>(&amp;devicename, DEVICE_NAME);</span><br><span class="line"></span><br><span class="line">status = <span class="built_in">IoCreateDevice</span>(driver, <span class="number">0</span>, &amp;devicename, FILE_DEVICE_UNKNOWN, <span class="number">0</span>, TRUE, &amp;pdevice);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">NT_SUCCESS</span>(status))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Create Device Failed:%x\n&quot;</span>, status);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里把DeviceName写成宏，这样后续修改会更加便捷。<br>其中RtlInitUnicodeString是驱动中初始化字符串的运行时函数，定义的是常量，不可修改。</p><p>测试结果如下<br><a href="https://imgtu.com/i/7syXCR"><img src="https://s4.ax1x.com/2022/01/19/7syXCR.png" alt="7syXCR.png"></a></p><p>可以看到我们所创建的设备名已经显示在我们所创建的驱动下方了。</p><h3 id="符号链接的创建与删除"><a href="#符号链接的创建与删除" class="headerlink" title="符号链接的创建与删除"></a>符号链接的创建与删除</h3><p>但是虽然设备已经成功的创建，但是这样并不能被运行在R3层的应用程序所使用。windows系统是通过使用符号链接来访问设备的。例如磁盘分区的C、D盘，它们原本是这样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\Device\HarddiskVolume2&quot;</span></span><br><span class="line"><span class="string">&quot;\Device\HarddiskVolume3&quot;</span></span><br></pre></td></tr></table></figure><p>但是设备名显然是不容易记忆的。<br>而符号链接可以理解为设备的别名，更重要的是，设备名只能被内核模式下的其他驱动所识别，而别名可以被用户模式下的应用程序识别。“C:”就是一个符号链接名。<br>符号链接可以理解为一根系在设备上的一个绳子，拉动绳子也就拉动了设备。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//创建符号连接</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYM_NAME<span class="meta-string">L&quot;\\??\\MyFirstDevice&quot;</span></span></span><br><span class="line">...</span><br><span class="line">UNICODE_STRING symname = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RtlInitUnicodeString</span>(&amp;symname, SYM_NAME);</span><br><span class="line"></span><br><span class="line">status = <span class="built_in">IoCreateSymbolicLink</span>(&amp;symname, &amp;devicename);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">NT_SUCCESS</span>(status))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Create SymbolicLink Failed: %x\n&quot;</span>, status);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IoDeleteDevice</span>(pdevice);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到和创建设备的方法一样，只不过换成了IoCreateSymbolicLink函数。<br>同样的卸载例程也需要修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">VOID<span class="title">DrvUnload</span><span class="params">(PDRIVER_OBJECT pdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Unload\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pdriver-&gt;DeviceObject)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">IoDeleteDevice</span>(pdriver-&gt;DeviceObject);</span><br><span class="line"></span><br><span class="line">UNICODE_STRING symname = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RtlInitUnicodeString</span>(&amp;symname, SYM_NAME);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IoDeleteSymbolicLink</span>(&amp;symname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试如下：<br><a href="https://imgtu.com/i/7oMe6f"><img src="https://s4.ax1x.com/2022/01/24/7oMe6f.png" alt="7oMe6f.png"></a></p><p>如图，符号链接已经创建完成。<br>之前说过符号链接是给应用层程序使用的，<br>在下一章里，我们就来编写一个简单的Ring3程序来测试一下，应用层能不能成功使用我们刚刚创建的符号链接。</p>]]></content>
      
      
      
        <tags>
            
            <tag> x64驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>驱动开发学习笔记（1）</title>
      <link href="/2022/01/19/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2022/01/19/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-驱动开发学习笔记（1）"><a href="#Windows-驱动开发学习笔记（1）" class="headerlink" title="Windows 驱动开发学习笔记（1）"></a>Windows 驱动开发学习笔记（1）</h1><hr><p>本文需要读者拥有以下知识。</p>1. C或者C++语法基础（重要）2. 计算机组成原理（略微）3. 熟练使用谷歌百度等搜索引擎（必要）<p>本系列文章内程序的编写和测试环境均为 visual studio 2013 和 win10。<br>开发环境搭建可以参考<a href="https://blog.csdn.net/newnewman80/article/details/90754999">windows10 驱动开发环境 VS2019+WDK10</a></p><h4 id="什么是驱动？"><a href="#什么是驱动？" class="headerlink" title="什么是驱动？"></a>什么是驱动？</h4><p>驱动就是一个特别的软件。<br>驱动程序运行在系统的内核模式下，而我们平时使用的程序一般运行在用户模式下。<br>因此，一个普通驱动的编写和我们用C语言写一个HelloWorld程序，其实是差不多的。<br>下面我们就以一个最为简单的HelloWorld程序为框架，来依葫芦画瓢编写一个驱动程序，实现内核模式下的HelloWorld。</p><hr><h4 id="编写一个简单的驱动实现内核中打印HelloWorld"><a href="#编写一个简单的驱动实现内核中打印HelloWorld" class="headerlink" title="编写一个简单的驱动实现内核中打印HelloWorld"></a>编写一个简单的驱动实现内核中打印HelloWorld</h4><p>这是一个最简单的helloworld程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码我们不难发现，最简单的程序也会有一个main函数。<br>那么驱动作为一个程序，它也应该拥有一个它自己的“main”函数。<br>在驱动中，我们把这个main函数叫做驱动入口函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line">NTSTATUS DriverEntry（PDRIVER_OBJECT driver,UNICODE_STRING reg_path）</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DbgPrint</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文给出了驱动实现的HelloWorld程序，我们先来试试它能不能达到我们需要的效果。<br><a href="https://imgtu.com/i/7rcBDO"><img src="https://s4.ax1x.com/2022/01/19/7rcBDO.png" alt="7rcBDO.png"></a></p><p>可以看到我们成功的在内核中打印了我们的HelloWorld！</p><p>那我们再回过头来分析一下这个简单的驱动程序。<br>前面说了驱动程序也拥有主函数，即上述代码中的DriverEntry函数。它对应了普通程序中的main函数。<br>而NTSTATUS就是DriverEntry函数的返回值类型，它对应了普通程序中的int。（并不是说NTSTATUS是整型哦，只是结构上对应）<br>DriverEntry函数又拥有两个参数，分别是driver，reg_path。<br>那他们又是什么意思呢？<br>driver是驱动对象，类型是PDRIVER_OBJECT，这个从英文意思上就可以看出来。它作为驱动的一个实例被内核加载，确切的说，它是由内核中的I/O管理器来加载的。<br>而reg_path是服务主键，它的类型是UNICODE_STRING。<br>而且驱动程序因为运行在内核模式下，自然不能使用用户模式下的函数Printf来打印我们需要的信息。<br>这里我们就使用DbgPrint函数来打印内核信息。</p><p>自此程序的总体分析就结束了。<br>到这，可能会有人有疑问，怎么多出来了几个我不认识的类型？C语言有这些东西吗？<br>其实NTSTATUS,PDRIVER_OBJECT,UNICODE_STRING这些，是开发者定义的宏。这么做是为了更加清晰的去编写驱动，它们详细的内容在后面会提及，在第一章，只需知道它们是宏就好。</p><p>其实本文的驱动还存在一个问题，我暂且不在这里提出，看看有没有聪明的读者发现了，下一章中将会对这个问题编写解决方法。</p><p>而且下一章我们将在自己写的驱动中创建一个虚拟设备与符号链接。</p><hr><h4 id="附录：本文相关的程序及其使用"><a href="#附录：本文相关的程序及其使用" class="headerlink" title="附录：本文相关的程序及其使用"></a>附录：本文相关的程序及其使用</h4><p>待编写</p>]]></content>
      
      
      
        <tags>
            
            <tag> x64驱动 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
